const sqlite3 = require('sqlite3').verbose();
const db = new sqlite3.Database('./expense_tracker.db');

db.serialize(() => {
    db.run(`CREATE TABLE IF NOT EXISTS categories (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT NOT NULL,
        type TEXT NOT NULL
    )`);
    db.run(`CREATE TABLE IF NOT EXISTS transactions (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        type TEXT NOT NULL,
        category TEXT NOT NULL,
        amount REAL NOT NULL,
        date TEXT NOT NULL,
        description TEXT
    )`);
});

module.exports = db;


const express = require('express');
const bodyParser = require('body-parser');
const cors = require('cors');
const transactionsRouter = require('./routes/transactions');
const categoriesRouter = require('./routes/categories');

const app = express();
app.use(cors());
app.use(bodyParser.json());

app.use('/transactions', transactionsRouter);
app.use('/categories', categoriesRouter);

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});


const express = require('express');
const db = require('../db/database');
const router = express.Router();


router.post('/', (req, res) => {
    const { type, category, amount, date, description } = req.body;
    db.run(`INSERT INTO transactions (type, category, amount, date, description) VALUES (?, ?, ?, ?, ?)`, 
        [type, category, amount, date, description], function(err) {
            if (err) return res.status(500).send(err.message);
            res.status(201).json({ id: this.lastID });
        });
});


router.get('/', (req, res) => {
    db.all(`SELECT * FROM transactions`, [], (err, rows) => {
        if (err) return res.status(500).send(err.message);
        res.json(rows);
    });
});


router.get('/:id', (req, res) => {
    const id = req.params.id;
    db.get(`SELECT * FROM transactions WHERE id = ?`, [id], (err, row) => {
        if (err) return res.status(500).send(err.message);
        if (!row) return res.status(404).send('Transaction not found');
        res.json(row);
    });
});


router.put('/:id', (req, res) => {
    const { type, category, amount, date, description } = req.body;
    const id = req.params.id;
    db.run(`UPDATE transactions SET type = ?, category = ?, amount = ?, date = ?, description = ? WHERE id = ?`, 
        [type, category, amount, date, description, id], function(err) {
            if (err) return res.status(500).send(err.message);
            if (this.changes === 0) return res.status(404).send('Transaction not found');
            res.send('Transaction updated');
        });
});


router.delete('/:id', (req, res) => {
    const id = req.params.id;
    db.run(`DELETE FROM transactions WHERE id = ?`, [id], function(err) {
        if (err) return res.status(500).send(err.message);
        if (this.changes === 0) return res.status(404).send('Transaction not found');
        res.send('Transaction deleted');
    });
});


router.get('/summary', (req, res) => {
    db.all(`SELECT 
                SUM(CASE WHEN type = 'income' THEN amount ELSE 0 END) AS total_income,
                SUM(CASE WHEN type = 'expense' THEN amount ELSE 0 END) AS total_expenses
            FROM transactions`, [], (err, row) => {
        if (err) return res.status(500).send(err.message);
        res.json(row);
    });
});

module.exports = router;

const express = require('express');
const db = require('../db/database');
const router = express.Router();


router.post('/', (req, res) => {
    const { name, type } = req.body;
    db.run(`INSERT INTO categories (name, type) VALUES (?, ?)`, [name, type], function(err) {
        if (err) return res.status(500).send(err.message);
        res.status(201).json({ id: this.lastID });
    });
});


router.get('/', (req, res) => {
    db.all(`SELECT * FROM categories`, [], (err, rows) => {
        if (err) return res.status(500).send(err.message);
        res.json(rows);
    });
});

module.exports = router;

